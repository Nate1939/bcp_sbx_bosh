#!/bin/bash
#
# executable: deployments/staging-bosh/deploy
#
# Deploy the Staging BOSH Director
#
set -euo pipefail

##
# Set our current working directory to the root of the bcp repo
#
scriptAbsolutePath="$(dirname "$(readlink -f "$BASH_SOURCE")")"
cd "$scriptAbsolutePath/../../"

##
# bcp Setup
# Validates the current setup and guides the user if deviations are found
#
. "bcp/.scripts/setup.sh"

##
# !! DEPLOYMENT METADATA !!
#    Must be filled out!
#
DEPLOYMENT_NAME="staging-bosh"
DEPLOYMENT_DIRECTOR="bcp-sbx-bosh"

echo_deployment_metadata

##
# An array of external dependencies (clones) for this deployment.
# The array must contain the git repository URLs for the dependencies.
# Example:
#   "https://github.com/cloudfoundry/bosh-deployment.git"
#   "https://github.com/cloudfoundry/cf-deployment.git"
#
declare -a dependencies=(
    "https://github.com/cloudfoundry/bosh-deployment.git"
)

load_dependencies "${dependencies[@]}"

##
# Make sure we're targeting the correct Director for this operation
#
check_deployment_and_selected_director

##
# BOSH Deployment Definition
#
if ! [[ $# -eq 1 && $1 = "skip_deployment" ]]; then
bosh -e "$DEPLOYMENT_DIRECTOR" -d "$DEPLOYMENT_NAME" \
    deploy "bcp/clones/bosh-deployment/bosh.yml" \
    -v director_name="$DEPLOYMENT_NAME" \
    -v internal_ip="172.16.174.191" \
    -o "ops/add-azure-cpi.yml" \
    -o "deployments/$DEPLOYMENT_NAME/ops/modify-for-deployment-by-bosh.yml" \
    -o "deployments/$DEPLOYMENT_NAME/ops/external-db.yml" \
    -o "deployments/$DEPLOYMENT_NAME/ops/external-credhub.yml" \
    -o "deployments/$DEPLOYMENT_NAME/ops/external-uaa.yml" \
    -o "deployments/$DEPLOYMENT_NAME/ops/external-blobstore.yml" \
        -v bucket_name="$DEPLOYMENT_NAME" \
    -o "bcp/clones/bosh-deployment/jumpbox-user.yml" \
    -o "bcp/clones/bosh-deployment/misc/trusted-certs.yml" \
        --var-file trusted_ca_cert="deployments/$DEPLOYMENT_NAME/blobs/dynamic-puzzel-sbx-ca-certs.pem" \
    -o "deployments/$DEPLOYMENT_NAME/ops/add-trusted-ca-certs-to-director-vm.yml" \
        --var-file director_vm_trusted_ca_certs="deployments/$DEPLOYMENT_NAME/blobs/dynamic-puzzel-sbx-ca-certs.pem" \
    -o "bcp/common-ops/change-deployment-name.yml" \
        -v deployment_name="$DEPLOYMENT_NAME"
fi

##
# Post-deployment activities
#
if [[ $? -eq 0 ]]; then

    # Create a dummy 'state.json' for use by the select-director script
    printf "{\n"                                    >  "deployments/$DEPLOYMENT_NAME/state.json"
    printf "  \"deployed\": \"true\",\n"            >> "deployments/$DEPLOYMENT_NAME/state.json"
    printf "  \"director\": \"$DEPLOYMENT_DIRECTOR\"\n" >> "deployments/$DEPLOYMENT_NAME/state.json"
    printf "}"                                      >> "deployments/$DEPLOYMENT_NAME/state.json"

    # Sync 'creds.yml' and 'state.json' files to the external stores
    sync_creds_file_to_blob_store "$DEPLOYMENT_NAME" "sync"
    
    pushd "deployments/$DEPLOYMENT_NAME/" > /dev/null
    sync_state_file_to_git "$DEPLOYMENT_NAME" "sync"
    popd > /dev/null

    # Check if the user is logged into CredHub
    bcpBoshInternalIpVar=$(cat deploy | grep internal_ip)
    [[ $bcpBoshInternalIpVar =~ \"([0-9.]+)\" ]]
    BCP_BOSH_IP="${BASH_REMATCH[1]}"
    credhubServerVersion="$(credhub login --version)"
    if [[ $(echo "$credhubServerVersion" | grep -cim1 "Server Version: Not Found") -eq 1 ]]; then
        bold_yellow_msg "\nYou must login to CredHub to be able to retrieve Azure ssh public key, and later update-cpi-config!"
        bold_yellow_msg "Run the following commands to login to credhub and receive instructions to update cpi- cloud- and runtime-config:\n"
        normal_msg " credhub api -s https://$BCP_BOSH_IP:8844 --skip-tls-validation"
        normal_msg " credhub login\n"
        normal_msg " ./deployments/$DEPLOYMENT_NAME/deploy skip_deployment\n"
        exit 1
    fi

    # Retrieve Azure ssh public key from Credhub, while stil targeting the management director and credhub
    az_ssh_public_key="$(credhub get -n /$DEPLOYMENT_DIRECTOR/$DEPLOYMENT_NAME/az_ssh -k public_key | awk 'NF {print "\""$0"\""}')"

    # Instruct the user to finish the 'staging-bosh' setup by following these stems
    bold_green_msg "The Staging (stag) BOSH Director is now ready!\n"
    bold_msg "Please perform the following steps to finish the setup:\n"
    normal_msg "1) Select the new Staging (stag) BOSH Director"
    bold_msg "./bcp/select-director $DEPLOYMENT_NAME\n"
    normal_msg "2) Update the cpi config"
    bold_msg "az_ssh_public_key=$az_ssh_public_key \n"
    bold_msg "./deployments/$DEPLOYMENT_NAME/cpi-config/update-cpi-config.sh \"\$az_ssh_public_key\"\n"
    normal_msg "3) Upload the Cloud Config"
    bold_msg "bosh update-cloud-config deployments/$DEPLOYMENT_NAME/cloud-config/cloud-config.yml\n"
    normal_msg "4) Update the runtime config to enable BOSH DNS"
    bold_msg "bosh update-runtime-config bcp/clones/bosh-deployment/runtime-configs/dns.yml --name bosh-dns\n\n"
fi

##
# DEPLOYMENT OPERATION COMPLETED!
#
printf "\n\n"
bold_green_msg_nn "FINISHED DEPLOYING: "
green_msg "${DEPLOYMENT_NAME}!"
printf "\n\n"